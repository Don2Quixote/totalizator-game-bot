import * as mysql from 'mysql2'
import { getUser, updateUser } from './users'
import { IUser } from './user'
import { TelegrafContext } from 'telegraf/typings/context'

const TEMPLATES = {
    MAIN: {
        TEXT: {
            US: 'üëã Welcome to the Totalizator game!\n' +
                '\n' +
                'üí∞ Your balance: {balance} BTC\n' +
                'üèÜ Your wins: {wins}',
            RU: 'üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–≥—Ä—É "–¢–æ—Ç–∞–ª–∏–∑–∞—Ç–æ—Ä"!\n' +
                '\n' +
                'üí∞ –í–∞—à –±–∞–Ω–∞–ª—Å: {balance} BTC\n' +
                'üèÜ –í–∞—à–∏ –ø–æ–±–µ–¥—ã: {wins}'
        },
        KEYBOARD: {
            US: [
                [ { text: '‚ùáÔ∏è Free stake', callback_data: 'freeStake' },
                  { text: 'üí∏ Stake', callback_data: 'stake' } ],
                [ { text: 'üì• Deposit', callback_data: 'deposit' },
                  { text: 'üì§ Withdraw', callback_data: 'withdraw' } ],
                [ { text: 'üë• Refferals', callback_data: 'refferals' } ],
                [ { text: 'üì¢ Rules', callback_data: 'rules' },
                  { text: '‚öôÔ∏è Settings', callback_data: 'settings' } ]
            ],
            RU: [
                [ { text: '‚ùáÔ∏è –ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è —Å—Ç–∞–≤–∫–∞', callback_data: 'freeStake' },
                  { text: 'üí∏ –°—Ç–∞–≤–∫–∞', callback_data: 'stake' } ],
                [ { text: 'üì• –ü–æ–ø–æ–ª–Ω–∏—Ç—å', callback_data: 'deposit' },
                  { text: 'üì§ –í—ã–≤–µ—Å—Ç–∏', callback_data: 'withdraw' } ],
                [ { text: 'üë• –†–µ—Ñ–µ—Ä–∞–ª—ã', callback_data: 'refferals' } ],
                [ { text: 'üì¢ –ü—Ä–∞–≤–∏–ª–∞', callback_data: 'rules' },
                  { text: '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏', callback_data: 'settings' } ]
            ]
        }
    },
    DEPOSIT: {
        TEXT: {
            US: 'üì• To deposit funds to your balance, send sum you wish to this BTC address:\n' +
                process.env.BTC_ADDRESS + '\n' +
                '\n' +
                'Then press "submit" button and send transaction ID',
            RU: 'üì• –ß—Ç–æ–±—ã –≤–Ω–µ—Å—Ç–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞ –Ω–∞ —Å–≤–æ–π –±–∞–ª–∞–Ω—Å, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—É–º–º—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å, –Ω–∞ —ç—Ç–æ—Ç BTC –∞–¥—Ä–µ—Å:\n' +
                process.env.BTC_ADDRESS + '\n' +
                '\n' +
                '–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏'
        },
        KEYBOARD: {
            US: [
                [ { text: 'üëà Back', callback_data: 'back' },
                  { text: '‚úÖ Submit', callback_data: 'submitDeposit' } ]
            ],
            RU: [
                [ { text: 'üëà –ù–∞–∑–∞–¥', callback_data: 'back' },
                  { text: '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', callback_data: 'submitDeposit' } ]
            ]
        }
    },
    SUBMIT_DEPOSIT: {
        TEXT: {
            US: 'üì• Enter the transaction ID:',
            RU: 'üì• –í–≤–µ–¥–∏—Ç–µ ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:'
        },
        KEYBOARD: {
            US: [ [ { text: '‚ùå Cancel deposit' } ] ],
            RU: [ [ { text: '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –¥–µ–ø–æ–∑–∏—Ç' } ] ]
        }
    },
    WITHDRAW: {
        TEXT: {
            US: 'üì§ Enter address to withdraw BTC:',
            RU: 'üì§ –í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–ª—è –≤—ã–≤–æ–¥–∞ BTC:'
        },
        KEYBOARD: {
            US: [ [ { text: '‚ùå Cancel withdraw' } ] ],
            RU: [ [ { text: '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –≤—ã–≤–æ–¥' } ] ]
        }
    },
    ALREADY_HAVE_WITHDRAW_REQUEST: {
        TEXT: {
            US: 'You already have withdraw request ({witdrawRequestSum})',
            RU: '–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ ({withdrawRequestSum})'
        }
    },
    ZERO_BALANCE: {
        TEXT: {
            US: '‚ùå You have no funds on your account',
            RU: '‚ùå –£ –≤–∞—Å –Ω–µ—Ç —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ'
        }
    },
    RULES: {
        TEXT: {
            US: 'üì¢ Rules',
            RU: 'üì¢ –ü—Ä–∞–≤–∏–ª–∞'
        },
        KEYBOARD: {
            US: [ [ { text: 'üëà Back', callback_data: 'back' } ] ],
            RU: [ [ { text: 'üëà –ù–∞–∑–∞–¥', callback_data: 'back' } ] ]
        }
    },
    SETTINGS: {
        TEXT: {
            US: '‚öôÔ∏è Select language',
            RU: '‚öôÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫'
        },
        KEYBOARD: {
            US: [
                [
                    { text: 'üá∫üá∏', callback_data: 'lang:US' },
                    { text: 'üá∑üá∫', callback_data: 'lang:RU' }
                ],
                [ { text: 'üëà Back', callback_data: 'back' } ]
            ],
            RU: [
                [
                    { text: 'üá∫üá∏', callback_data: 'lang:US' },
                    { text: 'üá∑üá∫', callback_data: 'lang:RU' }
                ],
                [ { text: 'üëà –ù–∞–∑–∞–¥', callback_data: 'back' } ]
            ]
        }
    },
    REFERRALS: {
        TEXT: {
            US: 'üë• Referrals\n' +
                '\n' +
                '‚ÑπÔ∏è Your refferer: {referrerName}\n' +
                'ü§ù Invited: {referralsCount}\n' +
                '\n' +
                'üîó Your invitation link: t.me/{botUsername}?start={userID}',
            RU: 'üë• –†–µ—Ñ–µ—Ä–∞–ª—ã\n' +
                '\n' +
                '‚ÑπÔ∏è –í–∞—Å –ø—Ä–∏–≥–ª–∞—Å–∏–ª: {referrerName}\n' +
                'ü§ù –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ: {referralsCount}\n' +
                '\n' +
                'üîó –í–∞—à–∞ —Å—Å—ã–ª–∫–∞ –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è: t.me/{botUsername}?start={userID}'
        },
        KEYBOARD: {
            US: [ [ { text: 'üëà Back', callback_data: 'back' } ] ],
            RU: [ [ { text: 'üëà –ù–∞–∑–∞–¥', callback_data: 'back' } ] ]
        }
    }
}

const balanceToString = (satoshi: number): string => {
    let btcPart =  (satoshi / 100000000).toFixed(0)
    let satoshiPart: any = satoshi % 100000000
    if      (satoshiPart < 10) satoshiPart = '0000000' + satoshiPart.toString()
    else if (satoshiPart < 100) satoshiPart = '000000' + satoshiPart.toString()
    else if (satoshiPart < 1000) satoshiPart = '00000' + satoshiPart.toString()
    else if (satoshiPart < 10000) satoshiPart = '0000' + satoshiPart.toString()
    else if (satoshiPart < 100000) satoshiPart = '000' + satoshiPart.toString()
    else if (satoshiPart < 1000000) satoshiPart = '00' + satoshiPart.toString()
    else if (satoshiPart < 10000000) satoshiPart = '0' + satoshiPart.toString()
    return btcPart + '.' + satoshiPart
}

export default async (ctx: TelegrafContext, bd: mysql.Connection) => {
    let user: IUser = await getUser(bd, ctx.from.id)
    let [command, ...args] = ctx.update.callback_query.data.split(':')
    console.log(command, args)
    
    if (!user) {
        ctx.answerCbQuery('‚ùå Something went wrong')
    } else if (command == 'lang') {
        user.lang = args[0] as 'US' | 'RU'
        await updateUser(bd, ctx.from.id, 'lang', user.lang)
        ctx.answerCbQuery('')
        let newText = TEMPLATES.MAIN.TEXT[user.lang].replace('{balance}', balanceToString(user.balance)).replace('{wins}', user.wins.toString())
        ctx.editMessageText(newText, {
            reply_markup: {
                inline_keyboard: TEMPLATES.MAIN.KEYBOARD[user.lang]
            }
        })
    } else if (command == 'back') {
        ctx.answerCbQuery('')
        let newText = TEMPLATES.MAIN.TEXT[user.lang].replace('{balance}', balanceToString(user.balance)).replace('{wins}', user.wins.toString())
        ctx.editMessageText(newText, {
            reply_markup: {
                inline_keyboard: TEMPLATES.MAIN.KEYBOARD[user.lang]
            }
        })
    } else if (command == 'deposit') {
        ctx.answerCbQuery('')
        let newText = TEMPLATES.DEPOSIT.TEXT[user.lang]
        ctx.editMessageText(newText, {
            reply_markup: {
                inline_keyboard: TEMPLATES.DEPOSIT.KEYBOARD[user.lang]
            }
        })
    } else if (command == 'submitDeposit') {
        await updateUser(bd, ctx.from.id, 'awaitingMessage', 'transactionID')
        ctx.answerCbQuery('')
        let newText = TEMPLATES.MAIN.TEXT[user.lang].replace('{balance}', balanceToString(user.balance)).replace('{wins}', user.wins.toString())
        await ctx.editMessageText(newText, {
            reply_markup: {
                inline_keyboard: TEMPLATES.MAIN.KEYBOARD[user.lang]
            }
        })
        let replyText = TEMPLATES.SUBMIT_DEPOSIT.TEXT[user.lang]
        ctx.reply(replyText, {
            reply_markup: {
                keyboard: TEMPLATES.SUBMIT_DEPOSIT.KEYBOARD[user.lang],
                resize_keyboard: true
            }
        })
    } else if (command == 'withdraw') {
        if (user.withdrawRequest) {
            ctx.answerCbQuery(TEMPLATES.ALREADY_HAVE_WITHDRAW_REQUEST.TEXT[user.lang].replace('{withdrawRequestSum}', balanceToString(user.withdrawRequest)), true)
        } else if (user.balance == 0) {
            ctx.answerCbQuery(TEMPLATES.ZERO_BALANCE.TEXT[user.lang])
        } else {
            ctx.answerCbQuery('')
            await updateUser(bd, ctx.from.id, 'awaitingMessage', 'withdrawAddress')
            let replyText = TEMPLATES.WITHDRAW.TEXT[user.lang]
            ctx.reply(replyText, {
                reply_markup: {
                    keyboard: TEMPLATES.WITHDRAW.KEYBOARD[user.lang],
                    resize_keyboard: true
                }
            })
        }
    } else if (command == 'rules') {
        ctx.answerCbQuery('')
        ctx.editMessageText(TEMPLATES.RULES.TEXT[user.lang], {
            reply_markup: {
                inline_keyboard: TEMPLATES.RULES.KEYBOARD[user.lang]
            }
        })
    } else if (command == 'settings') {
        ctx.answerCbQuery('')
        ctx.editMessageText(TEMPLATES.SETTINGS.TEXT[user.lang], {
            reply_markup: {
                inline_keyboard: TEMPLATES.SETTINGS.KEYBOARD[user.lang]
            }
        })
    } else if (command == 'refferals') {
        ctx.answerCbQuery('')
        let referrer = await getUser(bd, user.referrer)
        let newText =
            TEMPLATES.REFERRALS.TEXT[user.lang]
            .replace('{referrerName}', referrer ? referrer.name : '‚ùå')
            .replace('{referralsCount}', user.referrals.toString())
            .replace('{botUsername}', process.env.BOT_USERNAME)
            .replace('{userID}', user.id.toString())
        ctx.editMessageText(newText, {
            reply_markup: {
                inline_keyboard: TEMPLATES.REFERRALS.KEYBOARD[user.lang]
            }
        })
    }
}
